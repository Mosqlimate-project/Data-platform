# Generated by Django 4.2.5 on 2024-03-08 17:55
import os
import duckdb as db

from django.db import migrations
from django.conf import settings

DB_FILE = os.path.join(settings.STATICFILES_DIRS[0], "data/ibge.duckdb")

if not os.path.exists(DB_FILE):
    raise FileNotFoundError("ibge.duckdb is needed to populate brasil tables")


def populate_macroregions(apps, schema_editor):
    Macroregion = apps.get_model("vis", "Macroregion")

    with db.connect(DB_FILE) as conn:
        df = conn.sql("SELECT * FROM macroregions").fetchdf()

    for _, data in df.iterrows():
        Macroregion.objects.get_or_create(
            geocode=str(data["id"]), name=data["name"]
        )


def populate_states(apps, schema_editor):
    Macroregion = apps.get_model("vis", "Macroregion")
    State = apps.get_model("vis", "State")

    with db.connect(DB_FILE) as conn:
        df = conn.sql("SELECT * FROM states").fetchdf()

    for _, data in df.iterrows():
        State.objects.get_or_create(
            geocode=str(data["id"]),
            name=data["name"],
            uf=data["uf"],
            macroregion=Macroregion.objects.get(pk=str(data["macroregion"])),
        )


def populate_mesoregions(apps, schema_editor):
    State = apps.get_model("vis", "State")
    Mesoregion = apps.get_model("vis", "Mesoregion")

    with db.connect(DB_FILE) as conn:
        df = conn.sql("SELECT * FROM mesoregions").fetchdf()

    for _, data in df.iterrows():
        geocode = str(data["state"]) + str(data["geographic_id"]).zfill(2)
        Mesoregion.objects.get_or_create(
            geocode=geocode,
            name=data["name"],
            state=State.objects.get(pk=str(data["state"])),
        )


def populate_microregions(apps, schema_editor):
    Mesoregion = apps.get_model("vis", "Mesoregion")
    Microregion = apps.get_model("vis", "Microregion")

    with db.connect(DB_FILE) as conn:
        df = conn.sql("SELECT * FROM microregions").fetchdf()

    for _, data in df.iterrows():
        mesoregion = Mesoregion.objects.get(name=data["mesoregion"])
        geocode = mesoregion.state.geocode + str(data["geographic_id"]).zfill(
            3
        )
        Microregion.objects.get_or_save(
            geocode=geocode, name=data["name"], mesoregion=mesoregion
        )


def populate_cities(apps, schema_editor):
    Microregion = apps.get_model("vis", "Microregion")
    City = apps.get_model("vis", "City")

    with db.connect(DB_FILE) as conn:
        df = conn.sql(
            "SELECT cities.*, "
            "microregions.name AS microregion_name, "
            "microregions.mesoregion AS mesoregion "
            "FROM cities JOIN microregions "
            "ON cities.microregion = microregions.id"
        ).fetchdf()

    for _, data in df.iterrows():
        microregion = Microregion.objects.get(
            name=data["microregion_name"], mesoregion__name=data["mesoregion"]
        )

        City.objects.get_or_create(
            geocode=str(data["id"]), name=data["name"], microregion=microregion
        )


class Migration(migrations.Migration):
    dependencies = [
        (
            "vis",
            "0005_city_geomacrosaude_macroregion_mesoregion_state_and_more",
        ),
    ]

    operations = list(
        map(
            migrations.RunPython,
            [
                populate_macroregions,
                populate_states,
                populate_mesoregions,
                populate_microregions,
                populate_cities,
            ],
        )
    )
