services:
  frontend:
    hostname: mosqlimate-frontend
    restart: unless-stopped
    build:
      context: ..
      dockerfile: .contrib/mosqlimate/Dockerfile.frontend
      args:
        # note: if you want to use a specific UID and GID, ensure to add it to
        #       the .env file
        - UID=${HOST_UID}
        - GID=${HOST_GID}
        - FRONTEND_PORT=${FRONTEND_PORT}
    env_file:
      - ../.env
    ports:
      - ${FRONTEND_PORT}:${FRONTEND_PORT}
    user: "mosqlimate:mosqlimate"
    volumes:
      - ..:/opt/services/mosqlimate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:${FRONTEND_PORT}/status"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 40s
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - mosqlimate

  backend:
    hostname: mosqlimate-backend
    restart: unless-stopped
    build:
      context: ..
      dockerfile: .contrib/mosqlimate/Dockerfile.backend
      args:
        - UID=${HOST_UID}
        - GID=${HOST_GID}
    env_file:
      - ../.env
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    volumes:
      - ..:/opt/services/mosqlimate
      - ${EPISCANNER_HOST_DATA_DIR}:/opt/services/mosqlimate/episcanner
    user: "mosqlimate:mosqlimate"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:${BACKEND_PORT}"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mosqlimate

  worker:
    hostname: mosqlimate-backend
    restart: unless-stopped
    build:
      context: ..
      dockerfile: .contrib/mosqlimate/Dockerfile.backend
      args:
        - UID=${HOST_UID}
        - GID=${HOST_GID}
    env_file:
      - ../.env
    volumes:
      - ..:/opt/services/mosqlimate
      - ${EPISCANNER_HOST_DATA_DIR}:/opt/services/mosqlimate/episcanner
    user: "mosqlimate:mosqlimate"
    command: "celery -A backend.celeryapp worker --loglevel=info"
    healthcheck:
      test: ["CMD-SHELL", 'celery --app backend.celeryapp.app status']
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mosqlimate

  postgres:
    hostname: mosqlimate-postgres
    restart: unless-stopped
    build:
      context: ..
      dockerfile: .contrib/postgres/Dockerfile
      args:
        - UID=${POSTGRES_HOST_UID}
        - GID=${POSTGRES_HOST_GID}
        - environment=${ENV}
    env_file:
      - ../.env
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    user: "${POSTGRES_HOST_UID}:${POSTGRES_HOST_GID}"
    volumes:
      - ../.contrib/postgres/scripts:/docker-entrypoint-initdb.d/
      - ${POSTGRES_CONF_DIR_HOST}/postgresql.conf:/etc/postgresql/postgresql.conf
      - ${POSTGRES_DATA_DIR_HOST}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p ${POSTGRES_PORT} -U ${POSTGRES_USER}"]
      interval: 60s
      timeout: 5s
      retries: 10
    command: ["-p", "${POSTGRES_PORT}", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    networks:
      - mosqlimate

  documentation:
    hostname: mosqlimate-docs
    restart: unless-stopped
    build:
      context: ..
      dockerfile: .contrib/mkdocs/Dockerfile
    env_file:
      - ../.env
    ports:
      - ${MKDOCS_PORT}:8000
    volumes:
      - ../mkdocs:/root
    stdin_open: true
    tty: true
    command:
      - "serve"
      - "--dev-addr=0.0.0.0:8000"
      - "--config-file"
      - "./mkdocs.yml"
    networks:
      - mosqlimate

  redis:
    platform: linux/amd64
    image: redis:alpine
    hostname: mosqlimate-redis
    restart: unless-stopped
    # environment:
      # DISABLE_COMMANDS: "FLUSHDB,FLUSHALL,CONFIG"
      # ALLOW_EMPTY_PASSWORD: "no"
      # REDIS_PASSWORD: "${REDIS_PASSWORD}"
    ports:
      - ${REDIS_PORT}:6379
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - redis:/data
    networks:
      - mosqlimate

networks:
  mosqlimate:
    driver: bridge

volumes:
  redis:
